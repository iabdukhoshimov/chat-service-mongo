syntax="proto3";

package versioning_service;
option go_package="genproto/versioning_service";

import "google/protobuf/empty.proto";
import "versioning.proto";

service ReleaseService {
    rpc Create(CreateReleaseRequest) returns (ReleaseWithCommit) {}
    rpc GetByID(ReleasePrimaryKey) returns (ReleaseWithCommit) {}
    rpc GetList(GetReleaseListRequest) returns (GetReleaseListResponse) {}
    rpc Update(UpdateReleaseRequest) returns (ReleaseWithCommit) {}
    rpc Delete(ReleasePrimaryKey) returns (google.protobuf.Empty) {}
    rpc GetCurrentActive(GetCurrentReleaseRequest) returns (GetCurrentReleaseResponse) {}
    rpc SetCurrentActive(SetCurrentReleaseRequest) returns (google.protobuf.Empty) {}
    rpc GetMultipleVersionInfo(GetMultipleVersionInfoRequest) returns (GetMultipleVersionInfoResponse) {}
}

enum ReleaseType {
    UNDEFINED = 0;
    MAJOR = 1;
    MINOR = 2;
    PATCH = 3;
}

message CreateReleaseRequest {
    string project_id = 1;
    string environment_id = 2;
    string author_id = 3;
    string description = 4;
    ReleaseType release_type = 5;
    string commit_id = 6;
    bool is_current = 7;
}

message ReleasePrimaryKey {
    string id = 1;
    string project_id = 2;
    string environment_id = 3;
    
}

message ApiCreateReleaseRequest {
    string project_id = 1;
    bool is_current = 2;
    string author_id = 3;
    string description = 4;
    ReleaseType release_type = 5;
}

message GetReleaseListRequest {
    int32 limit = 1;
    int32 offset = 2;
    string search = 3;
    string project_id = 4;
    string environment_id = 5;
    string created_at = 6;
}

message GetReleaseListResponse {
    int32 count = 1;
    repeated ReleaseWithCommit releases = 2;
}

message UpdateReleaseRequest {
    string id = 1;
    string description = 2;
    string project_id = 3;
    string environment_id = 4;
}

message ApiUpdateReleaseRequest {
    string description = 2;
    string project_id = 3;
}

message GetCurrentReleaseRequest {
    string environment_id = 1;
}

message GetCurrentReleaseResponse {
    string version_id = 1;
}

message SetCurrentReleaseRequest {
    string project_id = 1;
    string environment_id = 2;
    string version_id = 3;
}

message ApiSetCurrentReleaseRequest {
    string version_id = 1;
    string project_id = 2;
}

message GetMultipleVersionInfoRequest {
    repeated string version_ids = 1;
    string project_id = 2;
}

message VersionInfo {
    string version_id = 1;
    string commit_id = 2;
    string author_id = 3;
    string created_at = 4;
    string updated_at = 5;
    string desc = 6;
    bool is_current = 7;
    string version = 8;
}

message GetMultipleVersionInfoResponse {
    map<string, VersionInfo> version_infos = 1;
    int64 count = 2;
}

message ApiDeleteReleaseRequest {
    string project_id = 1;
}