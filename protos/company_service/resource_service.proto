syntax="proto3";

package company_service;
option go_package="genproto/company_service";

import "company.proto";
import "projects_service.proto";

service ResourceService {

    rpc AddResource(AddResourceRequest) returns (AddResourceResponse) {}
    rpc ConfigureResource(ConfigureResourceRequest) returns (ConfigureResourceResponse) {}
    rpc RemoveResource(RemoveResourceRequest) returns (EmptyProto) {}
    rpc UpdateResource(UpdateResourceRequest) returns (ResourceWithoutPassword) {}
    rpc GetResource(GetResourceRequest) returns (ResourceWithoutPassword) {}
    rpc GetReourceList(GetReourceListRequest) returns (GetReourceListResponse) {}
    rpc CreateResource(CreateResourceReq) returns (CreateResourceRes) {}
    rpc AddResourceInUcode(AddResourceInUcodeRequest) returns (AddResourceResponse) {}
    rpc ReconnectResource(ReconnectResourceRequest) returns (EmptyProto) {}
    rpc GetResourceWithPath(GetResourceRequest) returns (GetResourceWithPathResponse) {}
    rpc AutoConnect(GetProjectsRequest) returns (GetResourceManyWithPathResponse) {}
    rpc GetResourceByResEnvironId(GetResourceRequest) returns (ResourceWithoutPassword) {}
    rpc GetResEnvByResIdEnvId(GetResEnvByResIdEnvIdRequest) returns (ResourceEnvironment) {}
    rpc GetResourceById(GetResourceEnvironmentReq) returns(ResourceEnvironmentWithPassword) {}
    // resource environment
    rpc UpsertResourceEnvironment(UpsertResourceEnvironmentRequest) returns (UpsertResourceEnvironmentResponse) {}
    rpc GetResourceEnvironment(GetResourceEnvironmentReq) returns (ResourceEnvironment) {}
    rpc GetDefaultResourceEnvironment(GetDefaultResourceEnvironmentReq) returns (ResourceEnvironment) {}
    rpc GetListResourceEnvironment(GetListResourceEnvironmentReq) returns (GetListResourceEnvironmentRes) {}
    rpc GetListConfiguredResourceEnvironment(GetListConfiguredResourceEnvironmentReq) returns (GetListConfiguredResourceEnvironmentRes) {}
    rpc GetResourceByEnvID(GetResourceByEnvIDRequest) returns (GetResourceByEnvIDResponse) {}
    rpc GetServiceResources(GetServiceResourcesReq) returns (GetServiceResourcesRes) {}
    rpc SetDefaultResource(SetDefaultResourceReq) returns(SetDefaultResourceRes) {}
}

message SetDefaultResourceReq {
    string project_id = 1;
    string environment_id = 2;
    string resource_id = 3;
    ServiceType service_type = 4;
}

message SetDefaultResourceRes {
    string project_id = 1;
    string environment_id = 2;
    string resource_id = 3;
    ServiceType service_type = 4;
}

message GetServiceResourcesReq {
    string project_id = 1;
    string environment_id = 2;
}

message GetServiceResourcesRes {
    message ServiceTypeResources {
        message ServiceResources {
            string resource_id = 1;
            bool is_configured = 2;
            bool default = 3;
            string title = 4;
            ResourceType resource_type = 5;
        }
        ServiceType service_type = 1;
        repeated ServiceResources resource = 2;
    }
    repeated ServiceTypeResources service_resources = 1;
}

message GetDefaultResourceEnvironmentReq {
    string id = 1;
    string project_id = 2;
    string resource_id = 3;
    string environment_id = 4;
}

message GetListConfiguredResourceEnvironmentReq {
    string id = 1;
    string project_id = 2;
    string resource_id = 3;
    string environment_id = 4;
}

message GetListConfiguredResourceEnvironmentRes {
    message resource_environment {string id = 1;
        string project_id = 2;
        string resource_id = 3;
        string environment_id = 4;
        bool is_configured = 5;
        int32 resource_type = 6;
        int32 service_type = 7;
        string name = 8;
        string display_color = 9;
        string description = 10;
    }
    repeated resource_environment data = 1;
}

message GetListResourceEnvironmentReq {
    string id = 1;
    string project_id = 2;
    string resource_id = 3;
    string environment_id = 4;
}

message GetListResourceEnvironmentRes {
    repeated ResourceEnvironment data = 1;
    int32 count = 2;
}

message GetResourceEnvironmentReq {
    string id = 1;
    string project_id = 2;
    string resource_id = 3;
    string environment_id = 4;
}

message UpsertResourceEnvironmentRequest {
    repeated ResourceEnvironment resource_environments = 1;
}

message UpsertResourceEnvironmentResponse {
    repeated ResourceEnvironment resource_environments = 1;
}

message UpdateResourceRequest {
    string id = 1;
    string project_id = 2;
    string environment_id = 3;
    ResourceType resource_type = 4;
    string title = 5;
    bool is_configured = 6;
    Resource.Credentials credentials = 7;
    bool default = 8;
}

message UpdateResourceResponse {
    string project_id = 1;
    repeated Resource resources = 2;
    string company_id = 3;
    string user_id = 4;
    repeated ResourceEnvironment resource_environments = 5;
}

message AutoConnectRes {
    message ReconnectReq {
        message Credentials {
            string host = 1;
            string port = 2;
            string username = 3;
            string password = 4;
            string database = 5;
        }
        string k8s_namespace = 1;
        string project_id = 2;
        string secret_path = 3;
        Credentials credentials = 4;
        string user_id = 5;
    }
    repeated ReconnectReq data = 1;
}

message GetResEnvByResIdEnvIdRequest {
    string resource_id = 1;
    string environment_id = 2;
}


message GetResourceByEnvIDRequest {
    string env_id = 1;
}

message GetResourceByEnvIDResponse {
    message Resourse {
        string id = 1;
    }

    Resourse resource = 1;
}


message ResourceEnvironmentWithPassword {
    message Credentials {
        string host = 1;
        string port = 2;
        string username = 3;
        string database = 4;
        string password = 5;
    }
    ServiceType service_type = 1;
    ResourceType resource_type = 2;
    Credentials credentials = 3;
    string id = 4;
    string project_id = 5;
    string path = 6;
    string title = 7;
    string resource_id = 8;
    string environment_id = 9;
    string version_id = 10;
}